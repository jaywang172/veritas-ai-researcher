#!/usr/bin/env python3
"""
Test script to verify the Veritas system is working correctly
Uses the research goal from test.txt and sales_data.csv
"""

import os
import sys
from pathlib import Path

# Add current directory to path
sys.path.insert(0, str(Path(__file__).parent))

from dotenv import load_dotenv

load_dotenv()


def test_simple_workflow():
    """Test the simple workflow with the NVIDIA research goal."""
    print("Testing Simple Workflow...")
    print("=" * 50)

    try:
        from workflows.simple_workflow import run_simple_research

        # Research goal from test.txt
        goal = "基於sales_data.csv提供的五年期詳細財報，深度剖析NVIDIA商業模式的演變。請識別其核心增長引擎的轉變過程，對比數據中心與遊戲業務的消長趨勢，並結合市場估值變化，生成一份關於NVIDIA如何轉型為全球AI領導者的綜合戰略分析報告。"

        data_file = "sales_data.csv"

        print(f"Research Goal: {goal[:100]}...")
        print(f"Data File: {data_file}")
        print("\nStarting research workflow...")

        # Run the workflow
        result = run_simple_research(goal, data_file)

        print("\nWorkflow completed successfully!")
        print(f"Result length: {len(result)} characters")
        print(f"Word count: {len(result.split())} words")

        # Save result
        results_dir = Path("results")
        results_dir.mkdir(exist_ok=True)

        output_file = results_dir / "test_nvidia_analysis.txt"
        with open(output_file, "w", encoding="utf-8") as f:
            f.write("# NVIDIA Business Model Analysis Test\n")
            f.write("# Generated by Veritas Test Script\n")
            f.write(f"# Goal: {goal}\n")
            f.write(f"# Data: {data_file}\n")
            f.write("=" * 60 + "\n\n")
            f.write(result)

        print(f"\nResults saved to: {output_file}")

        return True

    except Exception as e:
        print(f"ERROR: Workflow failed: {e}")
        import traceback

        traceback.print_exc()
        return False


def test_api_keys():
    """Test if API keys are properly configured."""
    print("Testing API Configuration...")
    print("=" * 50)

    openai_key = os.getenv("OPENAI_API_KEY", "")
    tavily_key = os.getenv("TAVILY_API_KEY", "")

    if openai_key and openai_key != "your_openai_api_key_here":
        print(f"✅ OpenAI API Key: Configured (length: {len(openai_key)})")
    else:
        print("❌ OpenAI API Key: Not configured")
        return False

    if tavily_key and tavily_key != "your_tavily_api_key_here":
        print(f"✅ Tavily API Key: Configured (length: {len(tavily_key)})")
    else:
        print("⚠️  Tavily API Key: Not configured (optional)")

    return True


def test_data_file():
    """Test if data file exists and is readable."""
    print("Testing Data File...")
    print("=" * 50)

    data_file = Path("sales_data.csv")
    if not data_file.exists():
        print(f"❌ Data file not found: {data_file}")
        return False

    try:
        with open(data_file, "r", encoding="utf-8") as f:
            lines = f.readlines()

        print(f"✅ Data file found: {data_file}")
        print(f"   - Lines: {len(lines)}")
        print(f"   - Size: {data_file.stat().st_size} bytes")

        # Show first few lines
        print("   - Preview:")
        for i, line in enumerate(lines[:3]):
            print(f"     {i+1}: {line.strip()}")

        return True

    except Exception as e:
        print(f"❌ Error reading data file: {e}")
        return False


def test_dependencies():
    """Test if required dependencies are available."""
    print("Testing Dependencies...")
    print("=" * 50)

    required_packages = [
        "fastapi",
        "uvicorn",
        "crewai",
        "langchain_openai",
        "pandas",
        "matplotlib",
        "requests",
        "dotenv",
    ]

    missing = []
    for package in required_packages:
        try:
            if package == "dotenv":
                __import__("python_dotenv")
            elif package == "langchain_openai":
                __import__("langchain_openai")
            else:
                __import__(package.replace("-", "_"))
            print(f"✅ {package}")
        except ImportError:
            print(f"❌ {package}")
            missing.append(package)

    if missing:
        print(f"\nMissing packages: {', '.join(missing)}")
        print("Run: pip install -r requirements.txt")
        return False

    return True


def main():
    """Run all tests."""
    print("Veritas System Test")
    print("=" * 60)
    print()

    # Test 1: Dependencies
    deps_ok = test_dependencies()
    print()

    # Test 2: API Keys
    api_ok = test_api_keys()
    print()

    # Test 3: Data File
    data_ok = test_data_file()
    print()

    if not (deps_ok and api_ok and data_ok):
        print("❌ Pre-requisite tests failed. Cannot proceed with workflow test.")
        return False

    # Test 4: Workflow
    workflow_ok = test_simple_workflow()
    print()

    # Summary
    print("=" * 60)
    print("TEST SUMMARY")
    print("=" * 60)
    print(f"Dependencies: {'✅ PASS' if deps_ok else '❌ FAIL'}")
    print(f"API Keys: {'✅ PASS' if api_ok else '❌ FAIL'}")
    print(f"Data File: {'✅ PASS' if data_ok else '❌ FAIL'}")
    print(f"Workflow: {'✅ PASS' if workflow_ok else '❌ FAIL'}")
    print()

    if workflow_ok:
        print("🎉 Veritas system is working correctly!")
        print("You can now use the web interface at: http://localhost:8000")
        print("Or run: python start_veritas.py")
    else:
        print("🔧 System needs debugging. Check error messages above.")

    return workflow_ok


if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
